#
#       @file       VEXpressions.txt
#       @author     xy
#
#       @since      2018-09-02
#
#       @brief      Varions VEXpression presets for nodes.
#
#

groupexpression/snippet
    [qL] Curve Endpoints
    neighbourcount(0, @ptnum)==1

groupexpression/snippet
    [qL] Curve(s), Start Point
    vertexprimindex(0, @vtxnum)==0

groupexpression/snippet
    [qL] Curve(s), End Point
    vertexprimindex(0, @vtxnum)==@numvtx-1

groupexpression/snippet
    [qL] Open Primitives (e.g. Curves)
    primintrinsic(0, "closed", @elemnum)==0

groupexpression/snippet
    [qL] Closed Primitives
    primintrinsic(0, "closed", @elemnum)==1

groupexpression/snippet
    [qL] Prim Area: Smaller than
    chf("tolerance") > primintrinsic(0, "measuredarea", @elemnum)

groupexpression/snippet
    [qL] Prim Area: Larger than
    chf("tolerance") < primintrinsic(0, "measuredarea", @elemnum)

groupexpression/snippet
    [qL] Prim Length: Shorter than
    chf("tolerance") > primintrinsic(0, "measuredperimeter", @elemnum)

groupexpression/snippet
    [qL] Prim Length: Longer than
    chf("tolerance") < primintrinsic(0, "measuredperimeter", @elemnum)

groupexpression/snippet
    [qL] Prim Volume: Smaller than
    chf("tolerance") > primintrinsic(0, "measuredvolume", @elemnum)

groupexpression/snippet
    [qL] Prim Volume: Larger than
    chf("tolerance") < primintrinsic(0, "measuredvolume", @elemnum)

groupexpression/snippet
    [qL] Group by Normal/Lookat Point
    degrees( acos(dot(@N, normalize(chv("position")-@P))) ) < chf("angle")



attribexpression/snippet
    [qL] Element number
    @elemnum

attribexpression/snippet
    [qL] Element number (float [0..1])
    @elemnum/(@numelem-1.0)

attribexpression/snippet
    [qL] Random Distribution (elemnum)
    chramp("distribution", random(@elemnum*12+34))

attribexpression/snippet
    [qL] Random Distribution (id)
    chramp("distribution", random(@id*76+19))

attribexpression/snippet
    [qL] Vector to 2nd Input Point Positions
    @opinput1_P - @P

attribexpression/snippet
    [qL] Vector to 2nd Input Point Positions (Normalized)
    normalize(@opinput1_P - @P)

attribexpression/snippet
    [qL] Number of Nearby Points
    len(nearpoints(0, v@P, chf('maxdist'), chi('maxpts')))

attribexpression/snippet
    [qL] Number of Nearby Points (Normalized)
    len(nearpoints(0, v@P, chf('maxdist'), chi('maxpts'))) / float(chi('maxpts'))

attribexpression/snippet
    [qL] id to string attribute
    sprintf("piece%d", i@id)

attribexpression/snippet
    [qL] "name" piece numbers to int attribute
    opdigits(s@name)



attribwrangle/snippet
    [qL] Number of Nearby Points
    float maxdist = chf('maxdist');
    int maxpts = chi('maxpts');
    i@numnear = len(nearpoints(0, v@P, maxdist, maxpts));

attribwrangle/snippet
    [qL] Number of Nearby Points (Normalized)
    float maxdist = chf('maxdist');
    int maxpts = chi('maxpts');
    f@numnear = len(nearpoints(0, v@P, maxdist, maxpts)) / float(maxpts);

attribwrangle/snippet
    [qL] Snap to 2nd Input SDF Boundary
    // Snaps points of 1st input to the SDF boundary of 2nd input
    // 1st input: geometry
    // 2nd input: SDF volume to snap to
    // NOTE: make sure the exterior voxel band is large enough
    //       on the 2nd SDF volume
    vector
	d = volumegradient(1, 0, v@P),
	v = 0;
    float
	sdf = volumesample(1, 0, v@P);
    //if (sdf<0)
    {
	v = normalize(d) * -sdf;
    }
    v@P += v;

attribwrangle/snippet
    [qL] id attribute to name ("pieceNNN")
    s@name = sprintf("piece%d", i@id);

attribwrangle/snippet
    [qL] name ("pieceNNN") numbering to id attrib
    i@id = opdigits(s@name);

attribwrangle/snippet
    [qL] Point (element) number to id attribute
    i@id = @elemnum;


popforce/localforceexpression
    [qL] Magnitude by Ramp over Lifespan
    force *= chramp("force_by_age", @nage);

popforce/localforceexpression
    [qL] Random Magnitude from id
    // random magnitude from id          (exp,  min,    max)
    force *= fit01( pow(rand(@id*12+34),  1.0),  0.25,  1.0 );

popforce/localnoiseexpression
    [qL] Magnitude by Ramp over Lifespan
    amp *= chramp("amp_by_age", @nage);

popforce/localnoiseexpression
    [qL] Random Magnitude from id
    // random magnitude from id        (exp,   min,   max)
    amp *= fit01( pow(rand(@id*12+34),  1.0),  0.25,  1.0 );

