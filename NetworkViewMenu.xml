<?xml version="1.0" encoding="UTF-8"?>

<!--
    This file defines the menu items in the Houdini Network View pane.

    Files named the same (ie. NetworkViewMenu.xml) can exist in
    $HOME/houdiniX.Y/ directory and will supplement the original definitions
    found in $HFS/houdini/ (aka $HH).

    The format in this file is similar to the format in $HH/MainMenuMaster.
    See the comments in that file for more advanced customization abilities.
    
    Note that the id's correspond to their hotkeys with the h. prefix. Please
    use ids that begin with playbar. when adding new items.

    For scriptItem elements, a 'kwargs' python dictionary is provided with the
    following values:
	'parms'	    :	A list of hou.Parm objects which the script was invoked
			upon.
	'toolname'  :	The menu item's hotkey id 
	'altclick'  :	True if the Alt key was also pressed, False otherwise
	'ctrlclick'  :	True if the Ctrl key was also pressed, False otherwise
	'shiftclick'  :	True if the Shift key was also pressed, False otherwise
	'cmdclick'  :	True if the Option key was also pressed, False
			otherwise. Note that this can only be true on OSX.
-->

<mainMenu>
    <menuBar>


    <subMenu id = "qLib_network_view_menu">
        <modifyItem><insertBefore>help_menu</insertBefore></modifyItem>
        <label>qLib</label>

        <subMenu id = "select_submenu_ql">
            <label>Select</label>

            <scriptItem id="pane.wsheet.select_invert_ql">
                <label>Select Invert</label>
                <scriptCode><![CDATA[
import qlibutils
qlibutils.set_netview_selection(kwargs, lambda n: not n.isSelected(), allItems=True)
                ]]></scriptCode>
            </scriptItem>

            <separatorItem />

            <scriptItem id="pane.wsheet.select_all_of_same_type_ql">
                <label>All of Same Type</label>
                <scriptCode><![CDATA[
import qlibutils
sel = hou.selectedItems()
same = qlibutils.find_same_nodes(sel)
qlibutils.add_to_selection(same, kwargs)
                ]]></scriptCode>
            </scriptItem>

            <scriptItem id="pane.wsheet.select_all_of_same_color_ql">
                <label>All of Same Color</label>
                <scriptCode><![CDATA[
import qlibutils
sel = hou.selectedItems()
same = qlibutils.find_same_colored(sel)
qlibutils.add_to_selection(same, kwargs)
                ]]></scriptCode>
            </scriptItem>

            <scriptItem id="pane.wsheet.select_all_of_same_shape_ql">
                <label>All of Same Shape</label>
                <scriptCode><![CDATA[
import qlibutils
sel = hou.selectedItems()
same = qlibutils.find_same_shape(sel)
qlibutils.add_to_selection(same, kwargs)
                ]]></scriptCode>
            </scriptItem>

            <separatorItem />

            <scriptItem id="pane.wsheet.select_with_keyframed_parms_ql">
                <label>Animated (Keyframed)</label>
                <scriptCode><![CDATA[
import qlibutils
qlibutils.select_netview_nodes(kwargs, qlibutils.has_keyframed_parms)
                ]]></scriptCode>
            </scriptItem>

            <scriptItem id="pane.wsheet.select_with_time_dependent_parms_ql">
                <label>With Time-Dependent Parms</label>
                <scriptCode><![CDATA[
import qlibutils
qlibutils.select_netview_nodes(kwargs, qlibutils.has_time_dependent_parms)
                ]]></scriptCode>
            </scriptItem>

            <separatorItem />

            <scriptItem id="pane.wsheet.select_bypassed_ql">
                <label>Bypassed</label>
                <scriptCode><![CDATA[
import qlibutils
qlibutils.select_netview_nodes(kwargs, lambda n: n.isBypassed())
                ]]></scriptCode>
            </scriptItem>

            <scriptItem id="pane.wsheet.select_non_bypassed_ql">
                <label>Non-Bypassed</label>
                <scriptCode><![CDATA[
import qlibutils
qlibutils.select_netview_nodes(kwargs, lambda n: not n.isBypassed())
                ]]></scriptCode>
            </scriptItem>

            <separatorItem />

            <scriptItem id="pane.wsheet.select_frozen_ql">
                <label>Locked (Frozen)</label>
                <scriptCode><![CDATA[
import qlibutils
qlibutils.select_netview_nodes(kwargs, lambda n: qlibutils.is_node_locked(n))
                ]]></scriptCode>
            </scriptItem>

            <scriptItem id="pane.wsheet.select_non_frozen_ql">
                <label>Non-Locked (Non-Frozen)</label>
                <scriptCode><![CDATA[
import qlibutils
qlibutils.select_netview_nodes(kwargs, lambda n: not qlibutils.is_node_locked(n))
                ]]></scriptCode>
            </scriptItem>

            <separatorItem />

            <scriptItem id="pane.wsheet.select_time_dependent_ql">
                <label>Time Dependent</label>
                <scriptCode><![CDATA[
import qlibutils
qlibutils.select_netview_nodes(kwargs, lambda n: n.isTimeDependent())
                ]]></scriptCode>
            </scriptItem>

            <scriptItem id="pane.wsheet.select_non_time_dependent_ql">
                <label>Non-Time Dependent</label>
                <scriptCode><![CDATA[
import qlibutils
qlibutils.select_netview_nodes(kwargs, lambda n: not n.isTimeDependent())
                ]]></scriptCode>
            </scriptItem>

            <separatorItem />

            <scriptItem id="pane.wsheet.select_template_ql">
                <label>With Template Flag</label>
                <scriptCode><![CDATA[
import qlibutils
qlibutils.select_netview_nodes(kwargs, lambda n: n.isTemplateFlagSet())
                ]]></scriptCode>
            </scriptItem>

            <scriptItem id="pane.wsheet.select_display_ql">
                <label>With Display Flag</label>
                <scriptCode><![CDATA[
import qlibutils
qlibutils.select_netview_nodes(kwargs, lambda n: n.isDisplayFlagSet())
                ]]></scriptCode>
            </scriptItem>

            <scriptItem id="pane.wsheet.select_render_ql">
                <label>With Render Flag</label>
                <scriptCode><![CDATA[
import qlibutils
qlibutils.select_netview_nodes(kwargs, lambda n: n.isRenderFlagSet())
                ]]></scriptCode>
            </scriptItem>

            <separatorItem />

            <scriptItem id="pane.wsheet.select_same_author_ql">
                <label>By Same Author</label>
                <scriptCode><![CDATA[
import qlibutils
sel = hou.selectedNodes()
authors = qlibutils.get_node_authors(sel)
if len(authors)>0:
    qlibutils.statmsg("Selecting nodes by author(s): %s" % ",  ".join(authors))
    qlibutils.select_netview_nodes(kwargs, lambda n: qlibutils.has_author(n, authors))
                ]]></scriptCode>
            </scriptItem>

            <scriptItem id="pane.wsheet.select_same_author_name_only_ql">
                <label>By Same Author (Username Only)</label>
                <scriptCode><![CDATA[
import qlibutils
sel = hou.selectedNodes()
authors = qlibutils.get_node_authors(sel, username_only=True)
if len(authors)>0:
    qlibutils.statmsg("Selecting nodes by author(s): %s" % ",  ".join(authors))
    qlibutils.select_netview_nodes(kwargs, lambda n: qlibutils.has_author(n, authors, username_only=True))
                ]]></scriptCode>
            </scriptItem>

            <separatorItem />

            <scriptItem id="pane.wsheet.select_embedded_ql">
                <label>Embedded HDAs</label>
                <scriptCode><![CDATA[
import qlibutils
qlibutils.select_netview_nodes(kwargs, lambda n: qlibutils.has_embedded_def(n))
                ]]></scriptCode>
            </scriptItem>

            <scriptItem id="pane.wsheet.select_subnet_inputs_ql">
                <label>All Subnet Inputs</label>
                <scriptCode><![CDATA[
import qlibutils
qlibutils.select_netview_nodes(kwargs, lambda n: n.networkItemType().name()=="SubnetIndirectInput", allItems=True)
                ]]></scriptCode>
            </scriptItem>
<!--
            <separatorItem />

            <scriptItem id="pane.wsheet.select_subnetworks_ql">
                <label>Sub-Networks (wip)</label>
                <scriptCode><![CDATA[
hou.ui.displayMessage(str(kwargs))
                ]]></scriptCode>
            </scriptItem>

            <scriptItem id="pane.wsheet.select_non_subnetworks_ql">
                <label>Non-SubNetworks (wip)</label>
                <scriptCode><![CDATA[
hou.ui.displayMessage(str(kwargs))
                ]]></scriptCode>
            </scriptItem>

            <separatorItem />

            <scriptItem id="pane.wsheet.select_hdas_ql">
                <label>All HDA Nodes (wip)</label>
                <scriptCode><![CDATA[
hou.ui.displayMessage(str(kwargs))
                ]]></scriptCode>
            </scriptItem>

            <scriptItem id="pane.wsheet.select_unlocked_hdas_ql">
                <label>Unlocked HDAs (wip)</label>
                <scriptCode><![CDATA[
hou.ui.displayMessage(str(kwargs))
                ]]></scriptCode>
            </scriptItem>

            <scriptItem id="pane.wsheet.select_locked_hdas_ql">
                <label>Locked HDAs (wip)</label>
                <scriptCode><![CDATA[
hou.ui.displayMessage(str(kwargs))
                ]]></scriptCode>
            </scriptItem>
-->
        </subMenu>

        <subMenu id = "display_submenu_ql">
            <label>Display</label>

            <scriptItem id="pane.wsheet.display_show_all_ql">
                <label>Show All Nodes</label>
                <scriptCode><![CDATA[
sel = kwargs['editor'].pwd().children()
for s in sel:
    try:
        hou.hscript("opset -e on %s" % s.path())
    except:
        pass
                ]]></scriptCode>
            </scriptItem>

            <separatorItem />

            <scriptItem id="pane.wsheet.display_isolate_selected_ql">
                <label>Isolate Selected Nodes</label>
                <scriptCode><![CDATA[
sel = hou.selectedNodes()
all = kwargs['editor'].pwd().children()
if len(sel)>0:
    for s in all:
        try:
            hou.hscript("opset -e off %s" % s.path())
        except:
            pass
    for s in sel:
        try:
            hou.hscript("opset -e on %s" % s.path())
        except:
            pass
                ]]></scriptCode>
            </scriptItem>

            <scriptItem id="pane.wsheet.display_hide_selected_ql">
                <label>Hide Selected Nodes</label>
                <scriptCode><![CDATA[
sel = hou.selectedNodes()
for s in sel:
    try:
        hou.hscript("opset -e off %s" % s.path())
    except:
        pass
                ]]></scriptCode>
            </scriptItem>

            <separatorItem />

            <scriptItem id="pane.wsheet.display_show_desc_parm_ql">
                <label>Show Descriptive Parm</label>
                <scriptCode><![CDATA[
sel = hou.selectedNodes()
for s in sel:
    try:
        hou.hscript("opset -P on %s" % s.path())
    except:
        pass
                ]]></scriptCode>
            </scriptItem>

            <scriptItem id="pane.wsheet.display_hide_desc_parm_ql">
                <label>Hide Descriptive Parm</label>
                <scriptCode><![CDATA[
sel = hou.selectedNodes()
for s in sel:
    try:
        hou.hscript("opset -P off %s" % s.path())
    except:
        pass
                ]]></scriptCode>
            </scriptItem>

            <separatorItem />

            <scriptItem id="pane.wsheet.display_show_comment_ql">
                <label>Show Comment</label>
                <scriptCode><![CDATA[
sel = hou.selectedNodes()
for s in sel:
    try:
        hou.hscript("opset -Y on %s" % s.path())
    except:
        pass
                ]]></scriptCode>
            </scriptItem>

            <scriptItem id="pane.wsheet.display_hide_comment_ql">
                <label>Hide Comment</label>
                <scriptCode><![CDATA[
sel = hou.selectedNodes()
for s in sel:
    try:
        hou.hscript("opset -Y off %s" % s.path())
    except:
        pass
                ]]></scriptCode>
            </scriptItem>

            <separatorItem />

            <scriptItem id="pane.wsheet.reset_node_color_shape_ql">
                <label>Reset Node Color and Shape</label>
                <scriptCode><![CDATA[
sel = hou.selectedNodes()
import qlibutils; qlibutils.reset_nodes(kwargs, sel)
                ]]></scriptCode>
            </scriptItem>

        </subMenu>


        <separatorItem />


        <subMenu id = "copy_to_clipboard_submenu_ql">

            <label>Copy</label>

            <scriptItem id="pane.wsheet.copy_node_names_ql">
                <label>Selected OP Names</label>
                <scriptCode><![CDATA[
import qlibutils; qlibutils.nodes_to_clipboard()
                ]]></scriptCode>
            </scriptItem>

            <scriptItem id="pane.wsheet.copy_node_hdatypenames_ql">
                <label>Selected OP HDA Type Names</label>
                <scriptCode><![CDATA[
import qlibutils; qlibutils.nodes_to_clipboard(hdaTypeNames=True)
                ]]></scriptCode>
            </scriptItem>

            <separatorItem />

            <scriptItem id="pane.wsheet.copy_node_paths_ql">
                <label>Selected OP Full Paths</label>
                <scriptCode><![CDATA[
import qlibutils; qlibutils.nodes_to_clipboard(fullPaths=True)
                ]]></scriptCode>
            </scriptItem>

            <scriptItem id="pane.wsheet.copy_node_paths_hdatypenames_ql">
                <label>Selected OP Full Paths and Type</label>
                <scriptCode><![CDATA[
import qlibutils; qlibutils.nodes_to_clipboard(fullPaths=True, hdaTypeNames=True)
                ]]></scriptCode>
            </scriptItem>

            <separatorItem />

            <scriptItem id="pane.wsheet.copy_hda_locations_ql">
                <label>Selected HDA Location(s)</label>
                <scriptCode><![CDATA[
import qlibutils; qlibutils.hdapath_to_clipboard()
                ]]></scriptCode>
            </scriptItem>

        </subMenu>


        <subMenu id = "paste_from_clipboard_submenu_ql">
            <label>Paste</label>

            <scriptItem id="pane.wsheet.paste_from_clipboard_ql">
                <label>Clipboard as Text/Image...</label>
                <scriptCode><![CDATA[
import qlibutils; qlibutils.paste_clipboard_to_netview(kwargs)
                ]]></scriptCode>
            </scriptItem>

            <scriptItem id="pane.wsheet.paste_existing_image_ql">
                <label>Existing Pasted Image...</label>
                <expression>
                    import qlibutils
                    return qlibutils.hip_has_pasted_images(kwargs)
                </expression>
                <scriptCode><![CDATA[
import qlibutils; qlibutils.paste_existing_image(kwargs)
                ]]></scriptCode>
            </scriptItem>

            <separatorItem />

            <scriptItem id="pane.wsheet.paste_path_as_objectmerge_ql">
                <label>Copied Node(s) as Object Merge SOP...</label>
                <expression>
                    import qlibutils
                    return qlibutils.clipboard_has_node_paths(kwargs)
                </expression>
                <scriptCode><![CDATA[
import qlibutils; qlibutils.paste_clipboard_as_object_merge(kwargs)
                ]]></scriptCode>
            </scriptItem>

        </subMenu>


        <separatorItem />


        <subMenu id = "comment_submenu_ql">
            <label>Comment</label>

            <scriptItem id="pane.wsheet.comment_cut_ql">
                <label>Cut</label>
                <scriptCode><![CDATA[
import qlibutils
sel = hou.selectedNodes()
if sel:
    qlibutils.to_clipboard(sel[0].comment())
    sel[0].setComment("")
                ]]></scriptCode>
            </scriptItem>

            <scriptItem id="pane.wsheet.comment_copy_ql">
                <label>Copy</label>
                <scriptCode><![CDATA[
import qlibutils
sel = hou.selectedNodes()
if sel:
    qlibutils.to_clipboard(sel[0].comment())
                ]]></scriptCode>
            </scriptItem>

           <scriptItem id="pane.wsheet.comment_paste_ql">
                <label>Paste</label>
                <scriptCode><![CDATA[
sel = hou.selectedNodes()
c = hou.ui.getTextFromClipboard()
for s in sel:
    try:
        s.setComment(c)
    except:
        pass
                ]]></scriptCode>
            </scriptItem>

            <separatorItem />

            <scriptItem id="pane.wsheet.show_comment_ql">
                <label>Show in Network Editor</label>
                <scriptCode><![CDATA[
sel = hou.selectedNodes()
for s in sel:
    try:
        hou.hscript("opset -Y on %s" % s.path())
    except:
        pass
                ]]></scriptCode>
            </scriptItem>

            <scriptItem id="pane.wsheet.hide_comment_ql">
                <label>Hide in Network Editor</label>
                <scriptCode><![CDATA[
sel = hou.selectedNodes()
for s in sel:
    try:
        hou.hscript("opset -Y off %s" % s.path())
    except:
        pass
                ]]></scriptCode>
            </scriptItem>

            <separatorItem />

            <scriptItem id="pane.wsheet.clear_comment_ql">
                <label>Clear Comment...</label>
                <scriptCode><![CDATA[
d = hou.ui.displayMessage("Clear comment on selected nodes?", buttons=("Yes", "No", ))
if d == 0:
    sel = hou.selectedNodes()
    for s in sel:
        try:
            s.setComment("")
        except:
            pass
                ]]></scriptCode>
            </scriptItem>

        </subMenu>



        <subMenu id = "misc_submenu_ql">
            <label>Misc</label>

            <scriptItem id="pane.wsheet.embed_selected_hdas_ql">
                <label>Embed Selected HDAs...</label>
                <scriptCode><![CDATA[
import qlibutils; reload(qlibutils); qlibutils.embed_selected_hdas(kwargs)
]]></scriptCode>
            </scriptItem>

        </subMenu>


<!--
        <separatorItem />

        <scriptItem id="pane.wsheet.tmp_show_kwargs_ql">
            <label>debug: show kwargs [qL]</label>
            <scriptCode><![CDATA[
hou.ui.displayMessage(str(kwargs))
            ]]></scriptCode>
        </scriptItem>
-->
    </subMenu>


    </menuBar>
</mainMenu>
