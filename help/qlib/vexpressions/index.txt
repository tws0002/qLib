= VEXpressions =

"""qLib VEXpressions for existing Houdini nodes."""

Many Houdini nodes support VEXpressions where you can use VEX snippets to
extend certain aspects of a node's functionality.

qLib provides quite a few extra convenience VEXpression presets for built-in
nodes.

NOTE:
    All provided items are marked with a `[qL]` label postfix
    to be easily identifiable. This can be useful in a production
    environment with potentially heavily customized menu sets.

NOTE:
    For certain VEXpressions containing channel functions
    (e.g. `chf()`, `chi()`, `chv()`, etc) you need to press the
    [Icon:BUTTONS/create_parm_from_ch]
    button to create spare parameters for these channels on the node.

For the full up-to-date list, see the [VEXpressions file|VEXpressions.txt].


== VEXpressions ==

As of 2020-05-30 the following VEXpressions are available:


Node Type ||
    VEXpression Name ||


[Icon:SOP/groupexpression] Group Expression SOP |
    *Curve Endpoints*:
        Group points that are endpoints of curves.

    *Curve Start Point*:
        Group points that are the starting points of curves (first vertex).

    *Curve End Point*:
        Group points that are the last points of curves (last vertex).

    *Open Primitives*:
        Group open primitives (e.g. curves or poly lines).

    *Closed Primitives*:
        Group closed primitives.

    *Primitives with Area Smaller Than...*

    *Primitives with Area Larger Than...*

    *Primitives with Length Shorter Than...*

    *Primitives with Length Longer Than...*

    *Primitives with Volume Smaller Than...*

    *Primitives with Volume Larger Than...*:
        Group primitives matching the specified criteria.

    *Group by Normal/Lookat Point*:
        Groups primitives with normals pointing to a specific 3d point
        (within an angle tolerance)

    *Group by Same ids as in Second Input*:
        Given two sets of points or primitives, it groups elements from
        the first input with the same `id` attribute values
        as any component from the second input.


[Icon:SOP/attribexpression] Attrib Expression SOP |
    *Element number*:
        Point or primitive number as an integer

    *Element number `[0..1]`*:
        Point or primitive number, in the `[0..1]` normalized range

    *Random distribution (elemnum)*:
        A random number in the `[0..1]` range, based on the point or primitive number

    *Vector to 2nd Input Point Positions*:
        Vectors that will point towards the corresponding points of the 2nd input geometry
        (should have the same topology as the 1st input geometry).
        Useful to use two copies of the same geometry to specify direction vectors.

        See also [Velocity qL SOP|Node:sop/qLib::velocity_ql::2].

    *Number of nearby points*:
        The number of points within a given radius

    *Number of nearby points (Normalized)*:
        The number of nearby points as a `[0..1]` percentage, given a radius
        and a maximum number of points

    *id to string attribute*:
        Returns a "pieceNNN" string where NNN is the values of the `id` attribute

    *"name" piece numbers to int attribute*:
        Returns the digits in the `s@name` attribute (e.g. `pieceNNN`) as an integer


[Icon:SOP/attribwrangle] Attrib Wrangle SOP |
    *Number of Nearby Points*:
        The number of points within a given radius.

    *Number of nearby Points (Normalized)*:
        The number of nearby points as a `[0..1]` percentage, given a radius
        and a maximum number of points.

    *Snap to 2nd Input SDF Boundary*:
        Snaps points of the first input to the SDF boundary of the 2nd input.
        The 2nd input geometry should be an SDF volume (e.g. a VDB).
        Make sure the exterior voxel band of a VDB is large enough to encompass
        points of the 1st input geometry.

    *Extract Packed Prim Full Transform*:
        Extracts the full transformation matrices of packed primitives
        into an `xform` attribute. This attribute can be used by nodes
        such as the [Transform by Attrib SOP|Node:sop/xformbyattrib].

    *id attribute to name ("pieceNNN")*:
        Creates "pieceNNN" `name` attributes where NNN is the values of the `id` attribute.

    *name ("pieceNNN") numbering to id attrib*:
        Creates `id` attributes where the values are the digits in the `s@name` attribute (e.g. `pieceNNN`).

    *Point (element) number to id attribute*:
        Creates an `id` attribute, getting the values from the point numbers.
        Useful when setting up initial `id` attributes.


[Icon:POP/force] POP Force DOP |
    *Magnitude by Ramp over Lifespan* (force):
        Force magnitude is scaled by a ramp, mapped over the particles' lifespans.
    
    *Random Magnitude from id* (force):
        Force magnitude is randomized on a per-particle basis.

    *Amplitude by Ramp over Lifespan* (noise):
        Noise amplitude is scaled by a ramp, mapped over the particles' lifespans.

    *Random Amplitude by id* (noise):
        Noise amplitude is randomized on a per-particle basis.

[Icon:POP/advectbyvolumes] POP Advect by Volumes DOP |
    *Random Velocity Scale from id*:
        Random velocity scales on a per-particle basis.
        Also contains the negative-aged particles correction (see below).

    *Update velscale correctly for negative aged particles*:
        Negative aged (negative birth jitter, or "not yet born") particles
        will be applied the correct amount of velscale (so it will act as
        all other forces act with negative-aged particles).
